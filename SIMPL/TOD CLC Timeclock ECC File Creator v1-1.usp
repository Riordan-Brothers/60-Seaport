/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:				Technology On Demand/Ed Mana
Comments:				Copyright 2017 Technology On Demand. All Rights Reserved.
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
#CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT init, include_ext;
// ANALOG_INPUT 
// STRING_INPUT 
// BUFFER_INPUT 
// ANALOG_OUTPUT 
STRING_OUTPUT _skip_, mod_msg$;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER _skip_, _skip_, StoragePath$[25], FileName$[25];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

INTEGER i;
SIGNED_INTEGER nFileHandle, nFileWriteError;
STRING FileNameAndPath$[200], sBuf$[4096];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH init
{
	StartFileOperations();
	FileNameAndPath$ = StoragePath$ + FileName$;
    nFileHandle = FileOpen (FileNameAndPath$,_O_TEXT|_O_RDONLY);
	If (nFileHandle >= 0)
		{
		MAKESTRING (mod_msg$, "File Exists.\n");
		}
	ELSE IF (nFileHandle = -3024)
			{
			MAKESTRING (mod_msg$, "File Does Not Exist.\n");
			nFileHandle = FileOpen (FileNameAndPath$,_O_TEXT| _O_WRONLY | _O_CREAT);
            sBuf$ = "#2\x0D\x0A";
			sBuf$ = sBuf$ + "1,Monday On,0,1012015,0,0,420,-X-----,XXXXXXXXXXXX,0,W,,\x0D\x0A";
            sBuf$ = sBuf$ + "2,Monday Off,0,1012015,0,1,420,-X-----,XXXXXXXXXXXX,0,W,,\x0D\x0A";
			sBuf$ = sBuf$ + "3,Tuesday On,0,1012015,0,0,420,--X----,XXXXXXXXXXXX,0,W,,\x0D\x0A";
			sBuf$ = sBuf$ + "4,Tuesday Off,0,1012015,0,1,420,--X----,XXXXXXXXXXXX,0,W,,\x0D\x0A";
			sBuf$ = sBuf$ + "5,Wednesday On,0,1012015,0,0,420,---X---,XXXXXXXXXXXX,0,W,,\x0D\x0A";
			sBuf$ = sBuf$ + "6,Wednesday Off,0,1012015,0,1,420,---X---,XXXXXXXXXXXX,0,W,,\x0D\x0A";
			sBuf$ = sBuf$ + "7,Thursday On,0,1012015,0,0,420,----X--,XXXXXXXXXXXX,0,W,,\x0D\x0A";
			sBuf$ = sBuf$ + "8,Thursday Off,0,1012015,0,1,420,----X--,XXXXXXXXXXXX,0,W,,\x0D\x0A";
			sBuf$ = sBuf$ + "9,Friday On,0,1012015,0,0,420,-----X-,XXXXXXXXXXXX,0,W,,\x0D\x0A";
			sBuf$ = sBuf$ + "10,Friday Off,0,1012015,0,1,420,-----X-,XXXXXXXXXXXX,0,W,,\x0D\x0A";
			sBuf$ = sBuf$ + "11,Saturday On,0,1012015,0,0,420,------X,XXXXXXXXXXXX,1,W,,\x0D\x0A";
			sBuf$ = sBuf$ + "12,Saturday Off,0,1012015,0,1,420,------X,XXXXXXXXXXXX,1,W,,\x0D\x0A";
			sBuf$ = sBuf$ + "13,Sunday On,0,1012015,0,0,420,X------,XXXXXXXXXXXX,1,W,,\x0D\x0A";
			sBuf$ = sBuf$ + "14,Sunday Off,0,1012015,0,1,420,X------,XXXXXXXXXXXX,1,W,,\x0D\x0A";
			sBuf$ = sBuf$ + "15,New Years Day,0,1012017,1012017,0,60,XXXXXXX,XXXXXXXXXXXX,0,W,,\x0D\x0A";
			sBuf$ = sBuf$ + "16,Martin Luther King Day,0,1162017,1162017,0,60,XXXXXXX,XXXXXXXXXXXX,0,W,,\x0D\x0A";
			sBuf$ = sBuf$ + "17,Presidents Day,0,2202017,2202017,0,60,XXXXXXX,XXXXXXXXXXXX,0,W,,\x0D\x0A";
			sBuf$ = sBuf$ + "18,Good Friday,0,4162017,4162017,0,60,XXXXXXX,XXXXXXXXXXXX,1,W,,\x0D\x0A";
			sBuf$ = sBuf$ + "19,Easter Sunday,0,4162017,4162017,0,60,XXXXXXX,XXXXXXXXXXXX,1,W,,\x0D\x0A";
			sBuf$ = sBuf$ + "20,Memorial Day,0,5292017,5292017,0,60,XXXXXXX,XXXXXXXXXXXX,0,W,,\x0D\x0A";
			sBuf$ = sBuf$ + "21,Independence Day,0,7042017,7042017,0,60,XXXXXXX,XXXXXXXXXXXX,0,W,,\x0D\x0A";
			sBuf$ = sBuf$ + "22,Labor Day,0,9042017,9042017,0,60,XXXXXXX,XXXXXXXXXXXX,0,W,,\x0D\x0A";
			sBuf$ = sBuf$ + "23,Columbus Day,0,10092017,10092017,0,60,XXXXXXX,XXXXXXXXXXXX,0,W,,\x0D\x0A";
			sBuf$ = sBuf$ + "24,Veterans Day,0,11112017,11112017,0,60,XXXXXXX,XXXXXXXXXXXX,0,W,,\x0D\x0A";
			sBuf$ = sBuf$ + "25,Thanksgiving Day,0,11232017,11232017,0,60,XXXXXXX,XXXXXXXXXXXX,0,W,,\x0D\x0A";
			sBuf$ = sBuf$ + "26,Christmas Day,0,12252017,12252017,0,60,XXXXXXX,XXXXXXXXXXXX,0,W,,\x0D\x0A";
			IF (include_ext = 1)
				{
				sBuf$ = sBuf$ + "27,Exterior On,0,1012015,0,0,420,XXXXXXX,XXXXXXXXXXXX,0,W,,\x0D\x0A";
            	sBuf$ = sBuf$ + "28,Exterior Off,0,1012015,0,1,420,XXXXXXX,XXXXXXXXXXXX,0,W,,\x0D\x0A";
				}
			nFileWriteError = FileWrite(nFileHandle, sBuf$, LEN(sBuf$));
			}
   	FileClose(nFileHandle);
	EndFileOperations();  

}

/*
RELEASE input
{
    // TODO:  Add code here
}
*/

/*
CHANGE input
{
    // TODO:  Add code here
}
*/

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
/*
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}
*/

